# -*- coding: utf-8 -*-
"""440_Lockwood_Myers_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gY6qjGXP9bpZG34MJv5PIuleCwgceyii
"""

# Commented out IPython magic to ensure Python compatibility.
import glob
import pandas as pd

# Mount google drive
from google.colab import drive
drive.mount('/content/drive')

# %cd /content/drive/MyDrive/20.440_Omics/Final_Project_Data

# Definepattern to be searched in google drive
pattern = '*.csv.gz'

# Get a list of CSV files matching the pattern
csv_files = glob.glob(pattern)

# Create an empty dictionary to store DataFrames
dataframes = {}

# Iterate over the CSV files
for file_path in csv_files:
    # Extract file name from file path
    file_name = file_path.split('/')[-1].split('.')[0]  # Extracts file name without extension

    # Read CSV file into a DataFrame
    df = pd.read_csv(file_path)

    # Store DataFrame in the dictionary with file name as key
    dataframes[file_name] = df

# Get list of keys in dataframe dictionary
df_keys = list(dataframes.keys())

# Create new dictionary mapping index to sample names
sample_index_dict = {key: index + 1 for index, key in enumerate(df_keys)}

# Transpose the dataframe
for key, df in dataframes.items():
    dataframes[key] = df.transpose()

# Check that genes sampled are same for each sample
def genes_equality(dataframes):

    # Get list of genes in first sample dataframe
    genes = list(dataframes.values())[0].iloc[0]

    # Iterate over the remaining sample dataframes
    for df_key, df_value in dataframes.items():

        # Check that genes sampled are same for each sample
        if not df_value.iloc[0].equals(genes):
            return False

    return True

are_equal = genes_equality(dataframes)

print(are_equal)

# Stack RNAseq data from each sample into a single dataframe
def stack_dataframe(dataframes):

    # Make list of first sample dataframe values
    stacked_df = list(dataframes.values())[0].copy()

    # Iterate over the remaining sample dataframe values
    for df_key, df_value in dataframes.items():

        # Extract the RNA seq for remaining sample dataframe values
        appended_row = df_value.iloc[1]

        # Stack the dataframes
        stacked_df = pd.concat([stacked_df, appended_row.to_frame().T], ignore_index=True)


    return stacked_df

stacked_df = stack_dataframe(dataframes)

# Drop second row of stacked dataframe to account for doubling of first sample
stacked_df = stacked_df.drop(stacked_df.index[1])

# Reset index of stacked dataframe to match index_sample_dict library indexing
stacked_df.reset_index(drop=True, inplace=True)

display(stacked_df)

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/20.440_Omics/Final_Project_Pheno_Data

pheno_dataset = pd.read_csv("/content/drive/MyDrive/20.440_Omics/Final_Project_Pheno_Data/phenoData.csv")

from ast import AnnAssign
sample_index_dict

# Truncate sample names in sample_index_dict to match those in pheno_dataset
trunc_sample_index_dict = {key[-6:]: value for key, value in sample_index_dict.items()}

# Make list of truncated sample names
sample_list = list(trunc_sample_index_dict.keys())

# Make dict for sample to phenotype
sample_pheno_dict = {}

# Iterate over all sample names
for sample in sample_list:

  # Get phenotype for each given sample name in pheno_dataset, then append to sample_pheno_dict
  if sample in pheno_dataset['sample_name'].values:

    phenotype_value = pheno_dataset.loc[pheno_dataset['sample_name'] == sample, 'etiology'].values[0]

    sample_pheno_dict[sample] = phenotype_value


# Make dict for sample to race
sample_race_dict = {}

# Iterate over all sample names
for sample in sample_list:

  # Get race_pheno info for each given sample name in pheno_dataset
  if sample in pheno_dataset['sample_name'].values:
    phenotype_race_value_unprocessed = pheno_dataset.loc[pheno_dataset['sample_name'] == sample, 'disease_race'].values[0]

    # Truncate race_pheno to either AA or Ca for African American or Caucasian respectively
    if phenotype_race_value_unprocessed[0:2] == 'AA':
      race = 'AA'
      sample_race_dict[sample] = race

    if phenotype_race_value_unprocessed[0:2] == 'Ca':
      race = 'Ca'
      sample_race_dict[sample] = race

# Make an ordered list of phenotypes that maps to normalized_stacked_df order from
# sample_pheno_dict
ordered_list_pheno = []

ordered_list_pheno.append('Phenotype')

for sample, pheno in sample_pheno_dict.items():
  ordered_list_pheno.append(pheno)

# Make an ordered list of race that maps to normalized_stacked_df order from
# sample_race_dict
ordered_list_race = []

ordered_list_race.append('Race')

for sample, race in sample_race_dict.items():
  ordered_list_race.append(race)

# display(normalized_stacked_df)
display(stacked_df)

# Shift index of normalized_stacked_df by two to account for addition of phenotype and race
stacked_df.columns = [str(int(col) + 2) for col in stacked_df.columns]

# Insert pheno column to normalized_stacked_df
stacked_df.insert(0, '0', ordered_list_pheno)

# Insert race column to normalized_stacked_df
stacked_df.insert(1, '1', ordered_list_race)

# Make a copy of normalized_stacked_df to house df with only phenotypes of control (NF) or hypertrophic cardiomyopathy (HCM)
null_DCM_PPCM_normalized_stacked_df = stacked_df.copy()

# Drop rows that are not phenotype NF or HCM
null_DCM_PPCM_normalized_stacked_df = null_DCM_PPCM_normalized_stacked_df[~((null_DCM_PPCM_normalized_stacked_df['0'] == 'DCM') | (null_DCM_PPCM_normalized_stacked_df['0'] == 'PPCM'))]

null_DCM_PPCM_normalized_stacked_df.head(25)

sorted_null_DCM_PPCM_race_normalized_stacked_df = null_DCM_PPCM_normalized_stacked_df.copy()

# Set the first row as column titles
sorted_null_DCM_PPCM_race_normalized_stacked_df.columns = sorted_null_DCM_PPCM_race_normalized_stacked_df.iloc[0]

# Drop the first row
sorted_null_DCM_PPCM_race_normalized_stacked_df = sorted_null_DCM_PPCM_race_normalized_stacked_df.iloc[1:]

# Drop the race column
sorted_null_DCM_PPCM_race_normalized_stacked_df.drop('Race', axis=1, inplace=True)

# Sort the DataFrame by the 'Phenotype' column
sorted_null_DCM_PPCM_race_normalized_stacked_df = sorted_null_DCM_PPCM_race_normalized_stacked_df.sort_values(by='Phenotype')

# Display the sorted DataFrame
display(sorted_null_DCM_PPCM_race_normalized_stacked_df)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Extract gene expression values (excluding sample name and phenotype columns)
gene_expression_data = sorted_null_DCM_PPCM_race_normalized_stacked_df.iloc[:, 2:]

# Convert data to numeric type
gene_expression_data = gene_expression_data.apply(pd.to_numeric, errors='coerce')

# Drop any rows/columns with missing values
gene_expression_data.dropna(inplace=True)

# Transpose the DataFrame
gene_expression_data_transposed = gene_expression_data.T

# Replace column labels with phenotype values
phenotype_labels = sorted_null_DCM_PPCM_race_normalized_stacked_df['Phenotype'].values
gene_expression_data_transposed.columns = phenotype_labels

# Plot heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(gene_expression_data_transposed, cmap='viridis')
plt.title('Heatmap of Gene Expression vs Phenotype')
plt.xlabel('Phenotype')
plt.ylabel('Genes')
plt.show()